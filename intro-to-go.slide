An Introduction to Golang
Golang Wpg Meetup #1
15:04 29 Mar 2017

Mark St.Godard
@markstgodard

Andrew Hoff
@therealhoffer

* Welcome to Golang WPG Meetup #1

.image /img/small-golangwpg.jpg

* Thanks to our sponsors!
.image /img/boldlogo.png

* Agenda

- What is Go?

- Getting started

- Basics

- Tooling


* What is Go?

- Programming language developed by Google (2009)

- Statically typed

- Compiled

- Concurrent
.image /img/gopherbw.png _ 400

* What is Go?
Runs on Linux, macOS, Windows and more

Lots of popular projects and companies using:
- Docker
- Kubernetes
- Cloud Foundry
.image /img/gopherbw.png _ 400


* Getting Started

- Download at [[https://https://golang.org/dl/]]

.image /img/downloads.png _ 1000

- Go 1.8 latest stable version

- macOS
    brew install go

* What is the GOPATH?

- The *GOPATH* is an environment variable the specifies where your source code, other libraries/packages  and binaries will be found
- Go 1.8 sets a default GOPATH
- *$HOME/go* (unix-based)
- *%USERPROFILE%/go* (windows)

- *Example:*

    /Users/mark/go
    ├── bin
    │   └── helloworld
    └── src
        └── github.com
            └── markstgodard
                └── helloworld
                    └── main.go


* Let me see code already!

main.go

.play intro-to-go/hello-wpg.go

* Packages

- Go programs are comprised of one or more packages

- *main* is a special package which is used for running a program

.code intro-to-go/hello-wpg-main.go

* Import

- To use a package in your program, you import it

.code intro-to-go/hello-wpg-package.go

* Import

- Multiple imports can be grouped into a single import statement
.code intro-to-go/hello-wpg-multi-package.go

* Functions

- Functions...

* Exporting

- TODO: explain exporting naming

* Multiple return types

- TODO: explain and why its important


* Defining Variables

- TODO: explain how
- package or function level
- short vs. long declaration


* Types

- TODO: explain some of the basic types
- zero values (0 for numeric, false for boolean, "" for string)
- type inference ( i := 23  is an int,   3.21 is a float, etc.)

* Loops

- for, range

* Conditionals

- if, and if in short form
- if, else
- switch


* Defer

- TODO: explain how defer is so awesome

* Pointers

- Explain how go has pointers
- and how to use

* Structs

- TODO

* Arrays and Slices

- TODO and literals


* Maps

- TODO and literals

* Functions as values and closures

- TODO: explain how functions can be passed as args, returns
- TODO: explain how functions closures work?

* Methods
- methods are just a function with a receiver
- can be value or pointer receivers

* Interfaces
- TODO: explain how interfaces work, implicit
- interface{} special empty interface


* Goroutines
- TODO:


* Channels
- TODO:

* Tooling

- Go Build

    go build

- Go get

    go get

- Go fmt

    go fmt

- Go test

    go test
