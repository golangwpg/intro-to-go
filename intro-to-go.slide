An Introduction to Golang
Golang Wpg Meetup #1
15:04 29 Mar 2017

Mark St.Godard
@markstgodard

Andrew Hoff
@therealhoffer

* Welcome to Golang WPG Meetup #1

.image /img/small-golangwpg.jpg

* Thanks to our sponsors!
.image /img/boldlogo.png

* Agenda

- What is Go?

- Getting Setup

- Basics

- Toolchain (go build, fmt, vet)

* What is Go?

- Programming language developed by Google (2009)

- Statically typed

- Compiled

- Concurrent
.image /img/gopherbw.png _ 400

* What is Go?
Runs on Linux, macOS, Windows and more

Lots of popular projects and companies using:
- Docker
- Kubernetes
- Cloud Foundry
.image /img/gopherbw.png _ 400


* Getting Setup

- Download at [[https://https://golang.org/dl/]]

.image /img/downloads.png _ 1000

- Go 1.8 latest stable version

- macOS
    brew install go

* What is the GOPATH?

- The *GOPATH* is an environment variable the specifies where your source code, other libraries/packages  and binaries will be found
- Go 1.8 sets a default GOPATH
- *$HOME/go* (unix-based)
- *%USERPROFILE%/go* (windows)

- *Example:*

    /Users/mark/go
    ├── bin
    │   └── helloworld
    └── src
        └── github.com
            └── markstgodard
                └── helloworld
                    └── main.go


* Let me see some code already!

main.go

.play intro-to-go/hello-wpg.go

* Packages

- Go programs are comprised of one or more packages

- *main* is a special package which is used for running a program

.code intro-to-go/hello-wpg-main.go

* Import

- To use a package in your program, you import it

.code intro-to-go/hello-wpg-package.go

* Functions

- Functions can have zero or more input parameters
- parameter syntax is *name*, then *type*
- return type(s) defined after parameters

.play intro-to-go/function.go

* Exporting

- Names of functions, constants, etc. are "exported" if they begin with a capital letter
- names that start with a lowercase are not exported

*circle/circle.go*
.code intro-to-go/circle.go

* Exporting

- Package "circle" exports function "Area" but not "diameter"
- import circle package and use Area function
- Trying to call function "diameter" would result in a compile-type error

*main.go*
.code intro-to-go/function_circle.go

* Multiple return types

- Go supports multiple returns types and typically it is used for returning errors
- An *error* in Go is an interface that represents an error that has occurred

.code intro-to-go/circle_errors.go

* Errors

- Typical Go code will return an *error* as the last return type and handle the error appropriately
.code intro-to-go/function_circle_errors.go

* Variables

- Declaration and assignment:
.code intro-to-go/variables_long.go

- or
.code intro-to-go/variables_long_oneline.go

- Short form assignment (type inference):
.code intro-to-go/variables_short.go


* Standard types

- bool
- string
- int, int8, int16, int32, int64
- float32, float64
- byte (uint8)

- uint, uint8, uint16, uint32, uint64
- rune (int32)
- complex64, complex128

* Arrays

- arrays are fixed size (cannot be resized)
.code intro-to-go/arrays.go

- array literal
.code intro-to-go/arrays2.go

* Slices

- slices can be used to have resizable arrays
- technically they are references to underlying arrays

.code intro-to-go/slices1.go

- literal
.code intro-to-go/slices2.go


* Maps

- create a map, length and "range" over entries

.play intro-to-go/maps.go

* Maps

- add, update, remove entries

.play intro-to-go/maps2.go

* Structs

- TODO

* Methods
- methods are just a function with a receiver
- can be value or pointer receivers

* Interfaces
- TODO: explain how interfaces work, implicit
- interface{} special empty interface


* Goroutines
- TODO:


* Channels
- TODO:

* Tooling

- Go Build

    go build

- Go get

    go get

- Go fmt

    go fmt

- Go test

    go test


* Extra stuff

* Loops

- for, range

* Conditionals

- if, and if in short form
- if, else
- switch


* Defer

- TODO: explain how defer is so awesome

* Pointers

- Explain how go has pointers
- and how to use
