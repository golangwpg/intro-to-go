An Introduction to Golang
Golang Wpg Meetup #1
29 Mar 2017

Mark St.Godard
@markstgodard
https://github.com/markstgodard

Andrew Hoff
@therealhoffer
https://github.com/andrewhoff

* Welcome to Golang WPG Meetup #1

.image /img/small-golangwpg.jpg

* Thanks to our sponsors!
.image /img/boldlogo.png

* Agenda

- What is Go?

- Getting Setup

- Basics

- Goroutines & Channels

- Go Toolchain


* What is Go?

- Programming language developed by Google (2009)

- Statically typed

- Compiled

- Concurrent
.image /img/gopherbw.png _ 400

* What is Go?
Runs on Linux, macOS, Windows and more

Lots of popular projects and companies using:
- Docker
- Kubernetes
- Cloud Foundry
- Hashicorp
- InfluxDB
- CockroachDB
- Dropbox

.image /img/gopherbw.png _ 400


* Getting Setup

- Download at [[https://https://golang.org/dl/]]

.image /img/downloads.png _ 1000

- Go 1.8 (latest stable version)

- macOS
    brew install go

* What is the GOPATH?

- The *GOPATH* is an environment variable the specifies where your source code, other libraries/packages  and binaries will be found
- Go 1.8 sets a default GOPATH
- *$HOME/go* (unix-based)
- *%USERPROFILE%/go* (windows)

- *Example:*

    /Users/mark/go
    ├── bin
    │   └── helloworld
    └── src
        └── github.com
            └── markstgodard
                └── helloworld
                    └── main.go


* Let me see some code already!

*main.go*

.play intro-to-go/hello-wpg.go

* Packages

- Go programs are comprised of one or more packages

- *main* is a special package which is used for running a program

.code intro-to-go/hello-wpg-main.go

* Import

- To use a package in your program, you import it

.code intro-to-go/hello-wpg-package.go

* Functions

- Functions can have zero or more input parameters
- parameter syntax is *name*, then *type*
- return type(s) defined after parameters

.play intro-to-go/function.go

* Exporting

- Names of functions, constants, etc. are "exported" if they begin with a capital letter
- names that start with a lowercase are not exported

*circle/circle.go*
.code intro-to-go/circle.go

* Exporting

- Package "circle" exports function "Area" but not "diameter"
- import circle package and use Area function
- Trying to call function "diameter" would result in a compile-type error

*main.go*
.code intro-to-go/function_circle.go

* Multiple return types

- Go supports multiple returns types and typically it is used for returning errors
- An *error* in Go is an interface that represents an error that has occurred

.code intro-to-go/circle_errors.go

* Errors

- Typical Go code will return an *error* as the last return type and handle the error appropriately
.code intro-to-go/function_circle_errors.go

* Variables

- Declaration and assignment:
.code intro-to-go/variables_long.go

- or
.code intro-to-go/variables_long_oneline.go

- Short form assignment (type inference):
.code intro-to-go/variables_short.go


* Standard types

- bool
- string
- int, int8, int16, int32, int64
- float32, float64
- byte (uint8)

- uint, uint8, uint16, uint32, uint64
- rune (int32)
- complex64, complex128

* Arrays

- arrays are fixed size (cannot be resized)
.code intro-to-go/arrays.go

- array literal
.code intro-to-go/arrays2.go

* Slices

- slices are used for resizable arrays
- technically they are references to an underlying array

.code intro-to-go/slices1.go

- literal
.code intro-to-go/slices2.go

* Maps

- key/value data structure
- add value by key
- "get" or two-value get to check for existance of key
.code intro-to-go/map_create.go

* Maps

- create as literal, length and "range" over entries

.play intro-to-go/maps.go

* Maps

- add, update, remove entries

.play intro-to-go/maps2.go

* Structs

- typed collection of fields

.code intro-to-go/struct.go

* Pointers

- Yes, Go has pointers :)
- *&* will create a pointer (think "address of")
- *** will de-reference a pointer ("get the value at address")

.code intro-to-go/struct_pointer.go

* Pointers

- pointers are transparently de-referenced
- alternatively....

.play intro-to-go/struct_pointer2.go

* Methods
- a method is just a function with a receiver
- can be *value* or *pointer* receivers
- when to use which? [[https://github.com/golang/go/wiki/CodeReviewComments#receiver-type]]

.code intro-to-go/circle_struct.go

* Methods
- a method is just a function with a receiver

.code intro-to-go/circle_struct_use.go

* Interfaces
- Unlike Java and some other languages, Go has "implicitly implemented" interfaces
- does not have to explictly state a type implements an interface
- You will get a compile-time error if a type does not implement the interface

.code intro-to-go/circle_interface.go


* Goroutines
- Go provides a powerful concurrency model
- Goroutines are like lightweight threads
- Its not uncommon for a Go application to have thousands of goroutines
- Goroutines are started with the keyword *go* kinda feels like ...
    myfancyscript.sh &
- Can't always just "background and forget it"

* Goroutines

.code intro-to-go/goroutine.go

* Channels
- channels are a safe-way to send / receive data between goroutines
- handles synchronization without having to explicitly lock
  ch <- data // send data to channel
  data :- <- ch // read from channel

- channels are typed and need to be created before using
- channels can be *buffered* or *unbuffered* (basically set the channel size)
- unbuffered channels will block the sender until the receiver receives the value
- buffered channels will only block the sender if the buffer is full

* Channels
.code intro-to-go/channels.go

* Goroutines and Channels
.code intro-to-go/goroutine_channels.go

* Goroutines and Channels
.code intro-to-go/goroutine_channels2.go

* The Go Toolchain

- *Build* - compiles your program into a binary (but does not install into $GOPATH)
    go build

- *Install* - compile and installs into $GOPATH/bin dir
    go install

- *Run* - compiles and runs your program (main)
    go run main.go

- *go* *get* <package> - download and install a Golang package into $GOPATH

    go get github.com/rakyll/hey

* The Go Toolchain
- *go* *fmt* - formats golang source code
    go fmt

- *go* *test* - runs go tests (built-in basic testing framework)
    go test

- *go* *vet* - checks source code for issues, suspicious code
    go vet <package>

* Live Demo???
.image /img/gopher_machinegun.jpg _ 550

* What's Next For You?

Lots of go talks out there - start watching!

The Go Playground - [[https://play.golang.org/]]
GolangUK - [[https://www.youtube.com/channel/UC9ZNrGdT2aAdrNbX78lbNlQ]]
Gophercon - [[https://www.youtube.com/playlist?list=PL2ntRZ1ySWBdliXelGAItjzTMxy2WQh0P]]
Official Go Talks - [[https://talks.golang.org/]]

GolangWpg Github - [[https://github.com/golangwpg]]

Cool libraries to spark some project ideas - [[http://libs.club/golang/]]
Effective Go - [[https://golang.org/doc/effective_go.html]]

* What's Next for the Meetup?

- Sponsorship?
- Alternate Locations?
- Topics? Speakers?
- Schedule?
